// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zetasql/public/simple_table.proto

package zetasql

import (
	fmt "fmt"
	typepb "github.com/apstndb/go-zetasql-genproto/zetasql/public/typepb"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SimpleTableProto struct {
	Name                      *string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SerializationId           *int64               `protobuf:"varint,2,opt,name=serialization_id,json=serializationId" json:"serialization_id,omitempty"`
	IsValueTable              *bool                `protobuf:"varint,3,opt,name=is_value_table,json=isValueTable" json:"is_value_table,omitempty"`
	Column                    []*SimpleColumnProto `protobuf:"bytes,4,rep,name=column" json:"column,omitempty"`
	PrimaryKeyColumnIndex     []int32              `protobuf:"varint,9,rep,name=primary_key_column_index,json=primaryKeyColumnIndex" json:"primary_key_column_index,omitempty"`
	NameInCatalog             *string              `protobuf:"bytes,5,opt,name=name_in_catalog,json=nameInCatalog" json:"name_in_catalog,omitempty"`
	AllowAnonymousColumnName  *bool                `protobuf:"varint,6,opt,name=allow_anonymous_column_name,json=allowAnonymousColumnName" json:"allow_anonymous_column_name,omitempty"`
	AllowDuplicateColumnNames *bool                `protobuf:"varint,7,opt,name=allow_duplicate_column_names,json=allowDuplicateColumnNames" json:"allow_duplicate_column_names,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}             `json:"-"`
	XXX_unrecognized          []byte               `json:"-"`
	XXX_sizecache             int32                `json:"-"`
}

func (m *SimpleTableProto) Reset()         { *m = SimpleTableProto{} }
func (m *SimpleTableProto) String() string { return proto.CompactTextString(m) }
func (*SimpleTableProto) ProtoMessage()    {}
func (*SimpleTableProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_c39c4d202c369d41, []int{0}
}

func (m *SimpleTableProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleTableProto.Unmarshal(m, b)
}
func (m *SimpleTableProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleTableProto.Marshal(b, m, deterministic)
}
func (m *SimpleTableProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleTableProto.Merge(m, src)
}
func (m *SimpleTableProto) XXX_Size() int {
	return xxx_messageInfo_SimpleTableProto.Size(m)
}
func (m *SimpleTableProto) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleTableProto.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleTableProto proto.InternalMessageInfo

func (m *SimpleTableProto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SimpleTableProto) GetSerializationId() int64 {
	if m != nil && m.SerializationId != nil {
		return *m.SerializationId
	}
	return 0
}

func (m *SimpleTableProto) GetIsValueTable() bool {
	if m != nil && m.IsValueTable != nil {
		return *m.IsValueTable
	}
	return false
}

func (m *SimpleTableProto) GetColumn() []*SimpleColumnProto {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *SimpleTableProto) GetPrimaryKeyColumnIndex() []int32 {
	if m != nil {
		return m.PrimaryKeyColumnIndex
	}
	return nil
}

func (m *SimpleTableProto) GetNameInCatalog() string {
	if m != nil && m.NameInCatalog != nil {
		return *m.NameInCatalog
	}
	return ""
}

func (m *SimpleTableProto) GetAllowAnonymousColumnName() bool {
	if m != nil && m.AllowAnonymousColumnName != nil {
		return *m.AllowAnonymousColumnName
	}
	return false
}

func (m *SimpleTableProto) GetAllowDuplicateColumnNames() bool {
	if m != nil && m.AllowDuplicateColumnNames != nil {
		return *m.AllowDuplicateColumnNames
	}
	return false
}

type SimpleColumnProto struct {
	Name                 *string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type                 *typepb.TypeProto `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	IsPseudoColumn       *bool             `protobuf:"varint,3,opt,name=is_pseudo_column,json=isPseudoColumn" json:"is_pseudo_column,omitempty"`
	IsWritableColumn     *bool             `protobuf:"varint,4,opt,name=is_writable_column,json=isWritableColumn,def=1" json:"is_writable_column,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SimpleColumnProto) Reset()         { *m = SimpleColumnProto{} }
func (m *SimpleColumnProto) String() string { return proto.CompactTextString(m) }
func (*SimpleColumnProto) ProtoMessage()    {}
func (*SimpleColumnProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_c39c4d202c369d41, []int{1}
}

func (m *SimpleColumnProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleColumnProto.Unmarshal(m, b)
}
func (m *SimpleColumnProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleColumnProto.Marshal(b, m, deterministic)
}
func (m *SimpleColumnProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleColumnProto.Merge(m, src)
}
func (m *SimpleColumnProto) XXX_Size() int {
	return xxx_messageInfo_SimpleColumnProto.Size(m)
}
func (m *SimpleColumnProto) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleColumnProto.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleColumnProto proto.InternalMessageInfo

const Default_SimpleColumnProto_IsWritableColumn bool = true

func (m *SimpleColumnProto) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SimpleColumnProto) GetType() *typepb.TypeProto {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *SimpleColumnProto) GetIsPseudoColumn() bool {
	if m != nil && m.IsPseudoColumn != nil {
		return *m.IsPseudoColumn
	}
	return false
}

func (m *SimpleColumnProto) GetIsWritableColumn() bool {
	if m != nil && m.IsWritableColumn != nil {
		return *m.IsWritableColumn
	}
	return Default_SimpleColumnProto_IsWritableColumn
}

func init() {
	proto.RegisterType((*SimpleTableProto)(nil), "zetasql.SimpleTableProto")
	proto.RegisterType((*SimpleColumnProto)(nil), "zetasql.SimpleColumnProto")
}

func init() { proto.RegisterFile("zetasql/public/simple_table.proto", fileDescriptor_c39c4d202c369d41) }

var fileDescriptor_c39c4d202c369d41 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x5d, 0x6b, 0xd6, 0x30,
	0x14, 0xa6, 0xb6, 0xfb, 0xca, 0x74, 0xeb, 0x02, 0x42, 0x36, 0xbd, 0xa8, 0x43, 0x66, 0xbd, 0xe9,
	0xa0, 0x37, 0x82, 0x20, 0xe2, 0xe6, 0xcd, 0x8b, 0x20, 0xa3, 0x0e, 0xbd, 0x0c, 0x59, 0x1b, 0x5e,
	0x0e, 0xa6, 0x49, 0x6c, 0x52, 0x67, 0xf7, 0x1b, 0xfc, 0x2b, 0xfe, 0x47, 0xe9, 0x49, 0x3a, 0x75,
	0xee, 0xae, 0x3c, 0x1f, 0x3d, 0xcf, 0x39, 0x4f, 0xc8, 0xb3, 0x1b, 0xe9, 0x85, 0xfb, 0xa6, 0x4e,
	0xed, 0x78, 0xa5, 0xa0, 0x3d, 0x75, 0xd0, 0x5b, 0x25, 0xb9, 0x17, 0x57, 0x4a, 0x56, 0x76, 0x30,
	0xde, 0xd0, 0xad, 0x28, 0x39, 0x3a, 0xbc, 0xa3, 0xf5, 0x93, 0x8d, 0x9a, 0xe3, 0x9f, 0x29, 0xc9,
	0x3f, 0xa1, 0xf5, 0x72, 0x76, 0x5e, 0xa0, 0x91, 0x92, 0x4c, 0x8b, 0x5e, 0xb2, 0xa4, 0x48, 0xca,
	0x9d, 0x06, 0xbf, 0xe9, 0x4b, 0x92, 0x3b, 0x39, 0x80, 0x50, 0x70, 0x23, 0x3c, 0x18, 0xcd, 0xa1,
	0x63, 0x0f, 0x8a, 0xa4, 0x4c, 0x9b, 0xfd, 0x7f, 0xf0, 0x55, 0x47, 0x9f, 0x93, 0x3d, 0x70, 0xfc,
	0xbb, 0x50, 0x63, 0xcc, 0xc3, 0xd2, 0x22, 0x29, 0xb7, 0x9b, 0x87, 0xe0, 0x3e, 0xcf, 0x20, 0x4e,
	0xa2, 0x35, 0xd9, 0x6c, 0x8d, 0x1a, 0x7b, 0xcd, 0xb2, 0x22, 0x2d, 0x77, 0xeb, 0xa3, 0x2a, 0xa6,
	0xac, 0x42, 0x9e, 0x73, 0x24, 0x31, 0x50, 0x13, 0x95, 0xf4, 0x15, 0x61, 0x76, 0x80, 0x5e, 0x0c,
	0x13, 0xff, 0x2a, 0x27, 0x1e, 0x50, 0x0e, 0xba, 0x93, 0x3f, 0xd8, 0x4e, 0x91, 0x96, 0x1b, 0xcd,
	0xe3, 0xc8, 0x7f, 0x90, 0x53, 0xf8, 0xc1, 0x6a, 0x26, 0xe9, 0x09, 0xd9, 0x9f, 0xb7, 0xe0, 0xa0,
	0x79, 0x2b, 0xbc, 0x50, 0x66, 0xcd, 0x36, 0x70, 0xb9, 0x47, 0x33, 0xbc, 0xd2, 0xe7, 0x01, 0xa4,
	0x6f, 0xc8, 0x13, 0xa1, 0x94, 0xb9, 0xe6, 0x42, 0x1b, 0x3d, 0xf5, 0x66, 0x74, 0xcb, 0x10, 0x3c,
	0xc8, 0x26, 0xee, 0xc1, 0x50, 0xf2, 0x6e, 0x51, 0x84, 0x39, 0x1f, 0xe7, 0x23, 0xbd, 0x25, 0x4f,
	0x83, 0xbd, 0x1b, 0xad, 0x82, 0x56, 0x78, 0xf9, 0xb7, 0xdd, 0xb1, 0x2d, 0xf4, 0x1f, 0xa2, 0xe6,
	0xfd, 0x22, 0xf9, 0xe3, 0x77, 0xc7, 0xbf, 0x12, 0x72, 0xf0, 0xdf, 0xfa, 0xf7, 0xf6, 0x71, 0x42,
	0xb2, 0xb9, 0x46, 0xec, 0x60, 0xb7, 0xa6, 0xb7, 0xc7, 0xbb, 0x9c, 0x6c, 0x68, 0xb1, 0x41, 0x9e,
	0x96, 0x24, 0x07, 0xc7, 0xad, 0x93, 0x63, 0x67, 0x62, 0x98, 0x58, 0xc7, 0x1e, 0xb8, 0x0b, 0x84,
	0xc3, 0x28, 0x5a, 0x13, 0x0a, 0x8e, 0x5f, 0x0f, 0x80, 0x9d, 0xf1, 0xdb, 0x72, 0x92, 0x72, 0xfb,
	0x75, 0xe6, 0x87, 0x51, 0x36, 0x39, 0xb8, 0x2f, 0x91, 0x0e, 0x9e, 0xb3, 0x17, 0x84, 0xb6, 0xa6,
	0xaf, 0xd6, 0xc6, 0xac, 0x95, 0x5c, 0x32, 0x9c, 0x1d, 0xdc, 0x7d, 0x51, 0xee, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x33, 0xfc, 0x87, 0xe6, 0xaf, 0x02, 0x00, 0x00,
}
